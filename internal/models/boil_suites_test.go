// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Friends", testFriends)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Subscriptions", testSubscriptions)
	t.Run("UserBlocks", testUserBlocks)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Friends", testFriendsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Subscriptions", testSubscriptionsDelete)
	t.Run("UserBlocks", testUserBlocksDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Friends", testFriendsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Subscriptions", testSubscriptionsQueryDeleteAll)
	t.Run("UserBlocks", testUserBlocksQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Friends", testFriendsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Subscriptions", testSubscriptionsSliceDeleteAll)
	t.Run("UserBlocks", testUserBlocksSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Friends", testFriendsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Subscriptions", testSubscriptionsExists)
	t.Run("UserBlocks", testUserBlocksExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Friends", testFriendsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Subscriptions", testSubscriptionsFind)
	t.Run("UserBlocks", testUserBlocksFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Friends", testFriendsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Subscriptions", testSubscriptionsBind)
	t.Run("UserBlocks", testUserBlocksBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Friends", testFriendsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Subscriptions", testSubscriptionsOne)
	t.Run("UserBlocks", testUserBlocksOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Friends", testFriendsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Subscriptions", testSubscriptionsAll)
	t.Run("UserBlocks", testUserBlocksAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Friends", testFriendsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Subscriptions", testSubscriptionsCount)
	t.Run("UserBlocks", testUserBlocksCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Friends", testFriendsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Subscriptions", testSubscriptionsHooks)
	t.Run("UserBlocks", testUserBlocksHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Friends", testFriendsInsert)
	t.Run("Friends", testFriendsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Subscriptions", testSubscriptionsInsert)
	t.Run("Subscriptions", testSubscriptionsInsertWhitelist)
	t.Run("UserBlocks", testUserBlocksInsert)
	t.Run("UserBlocks", testUserBlocksInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("FriendToUserUsingFriend", testFriendToOneUserUsingFriend)
	t.Run("FriendToUserUsingUser", testFriendToOneUserUsingUser)
	t.Run("SubscriptionToUserUsingSubscriptionRequestor", testSubscriptionToOneUserUsingSubscriptionRequestor)
	t.Run("SubscriptionToUserUsingSubscriptionTarget", testSubscriptionToOneUserUsingSubscriptionTarget)
	t.Run("UserBlockToUserUsingRequestor", testUserBlockToOneUserUsingRequestor)
	t.Run("UserBlockToUserUsingTarget", testUserBlockToOneUserUsingTarget)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("UserToFriendFriends", testUserToManyFriendFriends)
	t.Run("UserToFriends", testUserToManyFriends)
	t.Run("UserToSubscriptionRequestorSubscriptions", testUserToManySubscriptionRequestorSubscriptions)
	t.Run("UserToSubscriptionTargetSubscriptions", testUserToManySubscriptionTargetSubscriptions)
	t.Run("UserToRequestorUserBlocks", testUserToManyRequestorUserBlocks)
	t.Run("UserToTargetUserBlocks", testUserToManyTargetUserBlocks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("FriendToUserUsingFriendFriends", testFriendToOneSetOpUserUsingFriend)
	t.Run("FriendToUserUsingFriends", testFriendToOneSetOpUserUsingUser)
	t.Run("SubscriptionToUserUsingSubscriptionRequestorSubscriptions", testSubscriptionToOneSetOpUserUsingSubscriptionRequestor)
	t.Run("SubscriptionToUserUsingSubscriptionTargetSubscriptions", testSubscriptionToOneSetOpUserUsingSubscriptionTarget)
	t.Run("UserBlockToUserUsingRequestorUserBlocks", testUserBlockToOneSetOpUserUsingRequestor)
	t.Run("UserBlockToUserUsingTargetUserBlocks", testUserBlockToOneSetOpUserUsingTarget)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("UserToFriendFriends", testUserToManyAddOpFriendFriends)
	t.Run("UserToFriends", testUserToManyAddOpFriends)
	t.Run("UserToSubscriptionRequestorSubscriptions", testUserToManyAddOpSubscriptionRequestorSubscriptions)
	t.Run("UserToSubscriptionTargetSubscriptions", testUserToManyAddOpSubscriptionTargetSubscriptions)
	t.Run("UserToRequestorUserBlocks", testUserToManyAddOpRequestorUserBlocks)
	t.Run("UserToTargetUserBlocks", testUserToManyAddOpTargetUserBlocks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Friends", testFriendsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Subscriptions", testSubscriptionsReload)
	t.Run("UserBlocks", testUserBlocksReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Friends", testFriendsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Subscriptions", testSubscriptionsReloadAll)
	t.Run("UserBlocks", testUserBlocksReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Friends", testFriendsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Subscriptions", testSubscriptionsSelect)
	t.Run("UserBlocks", testUserBlocksSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Friends", testFriendsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Subscriptions", testSubscriptionsUpdate)
	t.Run("UserBlocks", testUserBlocksUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Friends", testFriendsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Subscriptions", testSubscriptionsSliceUpdateAll)
	t.Run("UserBlocks", testUserBlocksSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}

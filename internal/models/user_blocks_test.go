// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserBlocks(t *testing.T) {
	t.Parallel()

	query := UserBlocks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserBlocksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBlocksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserBlocks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBlocksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBlockSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBlocksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserBlockExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserBlock exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserBlockExists to return true, but got false.")
	}
}

func testUserBlocksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userBlockFound, err := FindUserBlock(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userBlockFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserBlocksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserBlocks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserBlocksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserBlocks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserBlocksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userBlockOne := &UserBlock{}
	userBlockTwo := &UserBlock{}
	if err = randomize.Struct(seed, userBlockOne, userBlockDBTypes, false, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}
	if err = randomize.Struct(seed, userBlockTwo, userBlockDBTypes, false, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userBlockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBlockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBlocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserBlocksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userBlockOne := &UserBlock{}
	userBlockTwo := &UserBlock{}
	if err = randomize.Struct(seed, userBlockOne, userBlockDBTypes, false, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}
	if err = randomize.Struct(seed, userBlockTwo, userBlockDBTypes, false, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userBlockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBlockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userBlockBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBlock) error {
	*o = UserBlock{}
	return nil
}

func userBlockAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBlock) error {
	*o = UserBlock{}
	return nil
}

func userBlockAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserBlock) error {
	*o = UserBlock{}
	return nil
}

func userBlockBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserBlock) error {
	*o = UserBlock{}
	return nil
}

func userBlockAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserBlock) error {
	*o = UserBlock{}
	return nil
}

func userBlockBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserBlock) error {
	*o = UserBlock{}
	return nil
}

func userBlockAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserBlock) error {
	*o = UserBlock{}
	return nil
}

func userBlockBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBlock) error {
	*o = UserBlock{}
	return nil
}

func userBlockAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBlock) error {
	*o = UserBlock{}
	return nil
}

func testUserBlocksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserBlock{}
	o := &UserBlock{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userBlockDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserBlock object: %s", err)
	}

	AddUserBlockHook(boil.BeforeInsertHook, userBlockBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userBlockBeforeInsertHooks = []UserBlockHook{}

	AddUserBlockHook(boil.AfterInsertHook, userBlockAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userBlockAfterInsertHooks = []UserBlockHook{}

	AddUserBlockHook(boil.AfterSelectHook, userBlockAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userBlockAfterSelectHooks = []UserBlockHook{}

	AddUserBlockHook(boil.BeforeUpdateHook, userBlockBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userBlockBeforeUpdateHooks = []UserBlockHook{}

	AddUserBlockHook(boil.AfterUpdateHook, userBlockAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userBlockAfterUpdateHooks = []UserBlockHook{}

	AddUserBlockHook(boil.BeforeDeleteHook, userBlockBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userBlockBeforeDeleteHooks = []UserBlockHook{}

	AddUserBlockHook(boil.AfterDeleteHook, userBlockAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userBlockAfterDeleteHooks = []UserBlockHook{}

	AddUserBlockHook(boil.BeforeUpsertHook, userBlockBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userBlockBeforeUpsertHooks = []UserBlockHook{}

	AddUserBlockHook(boil.AfterUpsertHook, userBlockAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userBlockAfterUpsertHooks = []UserBlockHook{}
}

func testUserBlocksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBlocksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userBlockColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBlockToOneUserUsingRequestor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserBlock
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userBlockDBTypes, false, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RequestorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Requestor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserBlockSlice{&local}
	if err = local.L.LoadRequestor(ctx, tx, false, (*[]*UserBlock)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Requestor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Requestor = nil
	if err = local.L.LoadRequestor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Requestor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserBlockToOneUserUsingTarget(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserBlock
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userBlockDBTypes, false, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TargetID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Target().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserBlockSlice{&local}
	if err = local.L.LoadTarget(ctx, tx, false, (*[]*UserBlock)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Target == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Target = nil
	if err = local.L.LoadTarget(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Target == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserBlockToOneSetOpUserUsingRequestor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBlock
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBlockDBTypes, false, strmangle.SetComplement(userBlockPrimaryKeyColumns, userBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetRequestor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Requestor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RequestorUserBlocks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RequestorID != x.ID {
			t.Error("foreign key was wrong value", a.RequestorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RequestorID))
		reflect.Indirect(reflect.ValueOf(&a.RequestorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RequestorID != x.ID {
			t.Error("foreign key was wrong value", a.RequestorID, x.ID)
		}
	}
}
func testUserBlockToOneSetOpUserUsingTarget(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBlock
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBlockDBTypes, false, strmangle.SetComplement(userBlockPrimaryKeyColumns, userBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetTarget(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Target != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TargetUserBlocks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TargetID != x.ID {
			t.Error("foreign key was wrong value", a.TargetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TargetID))
		reflect.Indirect(reflect.ValueOf(&a.TargetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TargetID != x.ID {
			t.Error("foreign key was wrong value", a.TargetID, x.ID)
		}
	}
}

func testUserBlocksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserBlocksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBlockSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserBlocksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBlocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userBlockDBTypes = map[string]string{`ID`: `integer`, `RequestorID`: `integer`, `TargetID`: `integer`}
	_                = bytes.MinRead
)

func testUserBlocksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userBlockAllColumns) == len(userBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserBlocksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userBlockAllColumns) == len(userBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBlock{}
	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBlockDBTypes, true, userBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userBlockAllColumns, userBlockPrimaryKeyColumns) {
		fields = userBlockAllColumns
	} else {
		fields = strmangle.SetComplement(
			userBlockAllColumns,
			userBlockPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserBlockSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserBlocksUpsert(t *testing.T) {
	t.Parallel()

	if len(userBlockAllColumns) == len(userBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserBlock{}
	if err = randomize.Struct(seed, &o, userBlockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBlock: %s", err)
	}

	count, err := UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userBlockDBTypes, false, userBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBlock struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBlock: %s", err)
	}

	count, err = UserBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
